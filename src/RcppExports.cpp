// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// clr_loglik_cpp
arma::vec clr_loglik_cpp(const arma::vec& beta, const arma::mat& x, const arma::vec& y, const arma::ivec& stratum, const arma::vec& offset, bool total);
RcppExport SEXP _clbart_clr_loglik_cpp(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP stratumSEXP, SEXP offsetSEXP, SEXP totalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type total(totalSEXP);
    rcpp_result_gen = Rcpp::wrap(clr_loglik_cpp(beta, x, y, stratum, offset, total));
    return rcpp_result_gen;
END_RCPP
}
// clr_grd_cpp
arma::vec clr_grd_cpp(const arma::colvec& beta, const arma::mat& x, const arma::vec& y, const arma::ivec& stratum, const arma::colvec& offset);
RcppExport SEXP _clbart_clr_grd_cpp(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP stratumSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(clr_grd_cpp(beta, x, y, stratum, offset));
    return rcpp_result_gen;
END_RCPP
}
// clr_fish_cpp
arma::mat clr_fish_cpp(const arma::colvec& beta, const arma::mat& x, const arma::vec& y, const arma::ivec& stratum, const arma::colvec& offset);
RcppExport SEXP _clbart_clr_fish_cpp(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP stratumSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(clr_fish_cpp(beta, x, y, stratum, offset));
    return rcpp_result_gen;
END_RCPP
}
// clr_cpp
Rcpp::List clr_cpp(const arma::mat& x, const arma::vec& y, const arma::ivec& stratum, const Rcpp::Nullable<arma::vec>& offset, const Rcpp::Nullable<arma::vec>& start_values, const int max_iter, const double tol);
RcppExport SEXP _clbart_clr_cpp(SEXP xSEXP, SEXP ySEXP, SEXP stratumSEXP, SEXP offsetSEXP, SEXP start_valuesSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::vec>& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::vec>& >::type start_values(start_valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(clr_cpp(x, y, stratum, offset, start_values, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// rlgam
double rlgam(double shape);
RcppExport SEXP _clbart_rlgam(SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(rlgam(shape));
    return rcpp_result_gen;
END_RCPP
}
// update_sigma
double update_sigma(const arma::vec& r, double sigma_scale, double sigma_old);
RcppExport SEXP _clbart_update_sigma(SEXP rSEXP, SEXP sigma_scaleSEXP, SEXP sigma_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_scale(sigma_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_old(sigma_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma(r, sigma_scale, sigma_old));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clbart_clr_loglik_cpp", (DL_FUNC) &_clbart_clr_loglik_cpp, 6},
    {"_clbart_clr_grd_cpp", (DL_FUNC) &_clbart_clr_grd_cpp, 5},
    {"_clbart_clr_fish_cpp", (DL_FUNC) &_clbart_clr_fish_cpp, 5},
    {"_clbart_clr_cpp", (DL_FUNC) &_clbart_clr_cpp, 7},
    {"_clbart_rlgam", (DL_FUNC) &_clbart_rlgam, 1},
    {"_clbart_update_sigma", (DL_FUNC) &_clbart_update_sigma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_clbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
